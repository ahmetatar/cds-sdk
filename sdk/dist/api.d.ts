/**
 * Component Desing Sample - Mock API
 * Mock API project to be used for e2e tests
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface Booking
 */
export interface Booking {
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    beginDate: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    endDate: string;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    profileId: number;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    totalPrice: number;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    currency: number;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    notes: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    status?: string;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    tax?: number;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    attachment?: string;
}
/**
 *
 * @export
 * @interface Credentials
 */
export interface Credentials {
    /**
     *
     * @type {string}
     * @memberof Credentials
     */
    userName: string;
    /**
     *
     * @type {string}
     * @memberof Credentials
     */
    password: string;
}
/**
 *
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    profileImage: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    fullName: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    link: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    userName: string;
    /**
     *
     * @type {number}
     * @memberof Profile
     */
    basePrice: number;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    currency: string;
    /**
     *
     * @type {boolean}
     * @memberof Profile
     */
    isDailyPrice: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof Profile
     */
    skills: Array<string>;
    /**
     *
     * @type {number}
     * @memberof Profile
     */
    hourAvailability: number;
}
/**
 *
 * @export
 * @interface TokenRequest
 */
export interface TokenRequest {
    /**
     *
     * @type {string}
     * @memberof TokenRequest
     */
    token: string;
}
/**
 *
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     *
     * @type {string}
     * @memberof TokenResponse
     */
    accessToken: string;
    /**
     *
     * @type {string}
     * @memberof TokenResponse
     */
    refreshToken?: string;
}
/**
 * AuthApi - fetch parameter creator
 * @export
 */
export declare const AuthApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Generates token
     * @param {Credentials} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginPost(body: Credentials, options?: any): FetchArgs;
    /**
     *
     * @summary Logouts the user
     * @param {TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutPost(body: TokenRequest, options?: any): FetchArgs;
    /**
     *
     * @summary Generate access and refresh token
     * @param {TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenPost(body: TokenRequest, options?: any): FetchArgs;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Generates token
     * @param {Credentials} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginPost(body: Credentials, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TokenResponse>;
    /**
     *
     * @summary Logouts the user
     * @param {TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutPost(body: TokenRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Generate access and refresh token
     * @param {TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenPost(body: TokenRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TokenResponse>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Generates token
     * @param {Credentials} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginPost(body: Credentials, options?: any): Promise<TokenResponse>;
    /**
     *
     * @summary Logouts the user
     * @param {TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutPost(body: TokenRequest, options?: any): Promise<Response>;
    /**
     *
     * @summary Generate access and refresh token
     * @param {TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenPost(body: TokenRequest, options?: any): Promise<TokenResponse>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @summary Generates token
     * @param {Credentials} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    loginPost(body: Credentials, options?: any): Promise<TokenResponse>;
    /**
     *
     * @summary Logouts the user
     * @param {TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    logoutPost(body: TokenRequest, options?: any): Promise<Response>;
    /**
     *
     * @summary Generate access and refresh token
     * @param {TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    tokenPost(body: TokenRequest, options?: any): Promise<TokenResponse>;
}
/**
 * BookingsApi - fetch parameter creator
 * @export
 */
export declare const BookingsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get all bookings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingsGet(options?: any): FetchArgs;
    /**
     *
     * @summary Get profile based on given id parameter
     * @param {number} id Booking id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingsIdGet(id: number, options?: any): FetchArgs;
    /**
     *
     * @summary Create a new booking
     * @param {Booking} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingsPost(body: Booking, options?: any): FetchArgs;
};
/**
 * BookingsApi - functional programming interface
 * @export
 */
export declare const BookingsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get all bookings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Booking>>;
    /**
     *
     * @summary Get profile based on given id parameter
     * @param {number} id Booking id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingsIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Booking>;
    /**
     *
     * @summary Create a new booking
     * @param {Booking} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingsPost(body: Booking, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
};
/**
 * BookingsApi - factory interface
 * @export
 */
export declare const BookingsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Get all bookings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingsGet(options?: any): Promise<Booking[]>;
    /**
     *
     * @summary Get profile based on given id parameter
     * @param {number} id Booking id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingsIdGet(id: number, options?: any): Promise<Booking>;
    /**
     *
     * @summary Create a new booking
     * @param {Booking} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingsPost(body: Booking, options?: any): Promise<Response>;
};
/**
 * BookingsApi - object-oriented interface
 * @export
 * @class BookingsApi
 * @extends {BaseAPI}
 */
export declare class BookingsApi extends BaseAPI {
    /**
     *
     * @summary Get all bookings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    bookingsGet(options?: any): Promise<Booking[]>;
    /**
     *
     * @summary Get profile based on given id parameter
     * @param {number} id Booking id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    bookingsIdGet(id: number, options?: any): Promise<Booking>;
    /**
     *
     * @summary Create a new booking
     * @param {Booking} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    bookingsPost(body: Booking, options?: any): Promise<Response>;
}
/**
 * ProfilesApi - fetch parameter creator
 * @export
 */
export declare const ProfilesApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get all profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesGet(options?: any): FetchArgs;
    /**
     *
     * @summary Get profile based on given id parameter
     * @param {number} id Profile id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesIdGet(id: number, options?: any): FetchArgs;
};
/**
 * ProfilesApi - functional programming interface
 * @export
 */
export declare const ProfilesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get all profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Profile>>;
    /**
     *
     * @summary Get profile based on given id parameter
     * @param {number} id Profile id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Profile>;
};
/**
 * ProfilesApi - factory interface
 * @export
 */
export declare const ProfilesApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Get all profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesGet(options?: any): Promise<Profile[]>;
    /**
     *
     * @summary Get profile based on given id parameter
     * @param {number} id Profile id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesIdGet(id: number, options?: any): Promise<Profile>;
};
/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export declare class ProfilesApi extends BaseAPI {
    /**
     *
     * @summary Get all profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    profilesGet(options?: any): Promise<Profile[]>;
    /**
     *
     * @summary Get profile based on given id parameter
     * @param {number} id Profile id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    profilesIdGet(id: number, options?: any): Promise<Profile>;
}
