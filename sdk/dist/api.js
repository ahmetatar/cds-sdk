"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Component Desing Sample - Mock API
 * Mock API project to be used for e2e tests
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfilesApi = exports.ProfilesApiFactory = exports.ProfilesApiFp = exports.ProfilesApiFetchParamCreator = exports.BookingsApi = exports.BookingsApiFactory = exports.BookingsApiFp = exports.BookingsApiFetchParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiFetchParamCreator = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = void 0;
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var BASE_PATH = "/".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = isomorphicFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * AuthApi - fetch parameter creator
 * @export
 */
exports.AuthApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Generates token
         * @param {Credentials} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling loginPost.');
            }
            var localVarPath = "/login";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Credentials" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Logouts the user
         * @param {TokenRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling logoutPost.');
            }
            var localVarPath = "/logout";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TokenRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Generate access and refresh token
         * @param {TokenRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenPost: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling tokenPost.');
            }
            var localVarPath = "/token";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TokenRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuthApi - functional programming interface
 * @export
 */
exports.AuthApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Generates token
         * @param {Credentials} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: function (body, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).loginPost(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = isomorphicFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Logouts the user
         * @param {TokenRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost: function (body, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).logoutPost(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = isomorphicFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Generate access and refresh token
         * @param {TokenRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenPost: function (body, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).tokenPost(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = isomorphicFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AuthApi - factory interface
 * @export
 */
exports.AuthApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Generates token
         * @param {Credentials} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: function (body, options) {
            return exports.AuthApiFp(configuration).loginPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Logouts the user
         * @param {TokenRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost: function (body, options) {
            return exports.AuthApiFp(configuration).logoutPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Generate access and refresh token
         * @param {TokenRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenPost: function (body, options) {
            return exports.AuthApiFp(configuration).tokenPost(body, options)(fetch, basePath);
        },
    };
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
var AuthApi = /** @class */ (function (_super) {
    __extends(AuthApi, _super);
    function AuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Generates token
     * @param {Credentials} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.loginPost = function (body, options) {
        return exports.AuthApiFp(this.configuration).loginPost(body, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Logouts the user
     * @param {TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.logoutPost = function (body, options) {
        return exports.AuthApiFp(this.configuration).logoutPost(body, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Generate access and refresh token
     * @param {TokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.tokenPost = function (body, options) {
        return exports.AuthApiFp(this.configuration).tokenPost(body, options)(this.fetch, this.basePath);
    };
    return AuthApi;
}(BaseAPI));
exports.AuthApi = AuthApi;
/**
 * BookingsApi - fetch parameter creator
 * @export
 */
exports.BookingsApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get all bookings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/bookings";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get profile based on given id parameter
         * @param {number} id Booking id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsIdGet: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling bookingsIdGet.');
            }
            var localVarPath = "/bookings/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new booking
         * @param {Booking} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsPost: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling bookingsPost.');
            }
            var localVarPath = "/bookings";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Booking" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * BookingsApi - functional programming interface
 * @export
 */
exports.BookingsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get all bookings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsGet: function (options) {
            var localVarFetchArgs = exports.BookingsApiFetchParamCreator(configuration).bookingsGet(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = isomorphicFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get profile based on given id parameter
         * @param {number} id Booking id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsIdGet: function (id, options) {
            var localVarFetchArgs = exports.BookingsApiFetchParamCreator(configuration).bookingsIdGet(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = isomorphicFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Create a new booking
         * @param {Booking} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsPost: function (body, options) {
            var localVarFetchArgs = exports.BookingsApiFetchParamCreator(configuration).bookingsPost(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = isomorphicFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * BookingsApi - factory interface
 * @export
 */
exports.BookingsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Get all bookings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsGet: function (options) {
            return exports.BookingsApiFp(configuration).bookingsGet(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get profile based on given id parameter
         * @param {number} id Booking id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsIdGet: function (id, options) {
            return exports.BookingsApiFp(configuration).bookingsIdGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary Create a new booking
         * @param {Booking} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsPost: function (body, options) {
            return exports.BookingsApiFp(configuration).bookingsPost(body, options)(fetch, basePath);
        },
    };
};
/**
 * BookingsApi - object-oriented interface
 * @export
 * @class BookingsApi
 * @extends {BaseAPI}
 */
var BookingsApi = /** @class */ (function (_super) {
    __extends(BookingsApi, _super);
    function BookingsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get all bookings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.bookingsGet = function (options) {
        return exports.BookingsApiFp(this.configuration).bookingsGet(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get profile based on given id parameter
     * @param {number} id Booking id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.bookingsIdGet = function (id, options) {
        return exports.BookingsApiFp(this.configuration).bookingsIdGet(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Create a new booking
     * @param {Booking} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.bookingsPost = function (body, options) {
        return exports.BookingsApiFp(this.configuration).bookingsPost(body, options)(this.fetch, this.basePath);
    };
    return BookingsApi;
}(BaseAPI));
exports.BookingsApi = BookingsApi;
/**
 * ProfilesApi - fetch parameter creator
 * @export
 */
exports.ProfilesApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get all profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/profiles";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get profile based on given id parameter
         * @param {number} id Profile id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesIdGet: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling profilesIdGet.');
            }
            var localVarPath = "/profiles/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProfilesApi - functional programming interface
 * @export
 */
exports.ProfilesApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get all profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGet: function (options) {
            var localVarFetchArgs = exports.ProfilesApiFetchParamCreator(configuration).profilesGet(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = isomorphicFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get profile based on given id parameter
         * @param {number} id Profile id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesIdGet: function (id, options) {
            var localVarFetchArgs = exports.ProfilesApiFetchParamCreator(configuration).profilesIdGet(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = isomorphicFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ProfilesApi - factory interface
 * @export
 */
exports.ProfilesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Get all profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGet: function (options) {
            return exports.ProfilesApiFp(configuration).profilesGet(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get profile based on given id parameter
         * @param {number} id Profile id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesIdGet: function (id, options) {
            return exports.ProfilesApiFp(configuration).profilesIdGet(id, options)(fetch, basePath);
        },
    };
};
/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
var ProfilesApi = /** @class */ (function (_super) {
    __extends(ProfilesApi, _super);
    function ProfilesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get all profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    ProfilesApi.prototype.profilesGet = function (options) {
        return exports.ProfilesApiFp(this.configuration).profilesGet(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get profile based on given id parameter
     * @param {number} id Profile id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    ProfilesApi.prototype.profilesIdGet = function (id, options) {
        return exports.ProfilesApiFp(this.configuration).profilesIdGet(id, options)(this.fetch, this.basePath);
    };
    return ProfilesApi;
}(BaseAPI));
exports.ProfilesApi = ProfilesApi;
